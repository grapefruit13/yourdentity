name: 🔧 Backend Build Check

on:
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - "be/functions/**"

permissions:
  contents: read
  pull-requests: write
  checks: write

jobs:
  backend-build-check:
    name: 🔧 백엔드 빌드 체크
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    timeout-minutes: 10

    steps:
      - name: 📥 코드 체크아웃
        uses: actions/checkout@v4

      - name: 📦 pnpm 설치
        uses: pnpm/action-setup@v2
        with:
          version: latest

      - name: 🔧 Node.js 설정
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "pnpm"
          cache-dependency-path: "be/functions/pnpm-lock.yaml"

      - name: 🔧 Firebase CLI 설치
        run: |
          npm install -g firebase-tools
          firebase --version

      - name: ⌛️ 의존성 설치
        run: |
          cd be/functions
          pnpm install --frozen-lockfile

      - name: 📝 배포용 .env 생성
        working-directory: be/functions
        shell: bash
        env:
          ENV_VARS: ${{ secrets.ENV_VARS }}
        run: |
          set -euo pipefail
          
          echo "📝 배포용 .env 생성 시작"
          
          # 파일 권한 제한 (보안)
          umask 077
          
          # 기존 .env 파일 제거 후 새로 생성
          rm -f .env
          touch .env
          chmod 600 .env
          
          # 기본 환경 설정
          echo "NODE_ENV=test" > .env
          
          # GitHub Secret의 환경변수를 .env에 주입
          # 주석(#으로 시작하는 줄)과 빈 줄은 제외
          if [ -n "${ENV_VARS:-}" ]; then
            echo "$ENV_VARS" | grep -v '^\s*#' | grep -v '^\s*$' >> .env
          else
            echo "❌ 오류: ENV_VARS Secret이 비어있습니다" >&2
            exit 1
          fi
          
          # .env 파일 생성 완료 확인
          line_count=$(wc -l < .env | tr -d ' ')
          if [ "$line_count" -lt 2 ]; then
            echo "❌ 오류: .env 파일이 제대로 생성되지 않았습니다" >&2
            exit 1
          fi
          
          echo "✅ .env 생성 완료 (${line_count}줄)"

      - name: 🔨 빌드 테스트
        working-directory: be/functions
        run: |
          echo "🔨 Firebase 에뮬레이터 빌드 테스트 시작"
          pnpm run build
          echo "✅ 빌드 테스트 완료"

      
      # ✅ 성공 시 코멘트 남기기
      - name: ✅ 빌드 성공 알림
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            const botComment = comments.find(comment =>
              comment.user.type === 'Bot' && comment.body.includes('🔧 빌드 상태')
            );
            const body = `## 🔧 빌드 상태: 성공! ✅

            Firebase Functions 빌드 및 에뮬레이터 기동이 **성공적으로 완료**되었습니다! 🎉

            ### ✅ 체크 완료
            - 🔧 **Backend Build (Emulator)**: 성공

            ### 📊 상세 정보
            - **Commit**: ${context.sha.substring(0, 7)}
            - **Branch**: ${context.payload.pull_request.head.ref}
            - **빌드 완료 시간**: ${new Date().toLocaleString('ko-KR', { timeZone: 'Asia/Seoul' })}

            > 🚀 **Functions 빌드 및 실행에 문제가 없습니다. 머지 가능합니다!**`;

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }

      # ❌ 실패 시 에뮬레이터 종료
      - name: ❌ 빌드 실패 시 에뮬레이터 종료
        if: failure()
        run: |
          echo "🧹 빌드 실패 → 에뮬레이터 프로세스 종료 중..."
          pkill -f "firebase emulators:start" || true

      # ❌ 실패 시 코멘트 남기기
      - name: ❌ 빌드 실패 알림
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            const botComment = comments.find(comment =>
              comment.user.type === 'Bot' && comment.body.includes('🔧 빌드 상태')
            );
            const runUrl = `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`;
            const body = `## 🔧 빌드 상태: 실패! ❌

            **Firebase Functions 빌드 또는 에뮬레이터 실행이 실패했습니다.** 

            ### ❌ 실패한 항목
            - 🔧 **Backend Build (Emulator)**: 실패

            ### 📊 상세 정보
            - **Commit**: ${context.sha.substring(0, 7)}
            - **Branch**: ${context.payload.pull_request.head.ref}
            - **실패 시간**: ${new Date().toLocaleString('ko-KR', { timeZone: 'Asia/Seoul' })}
            - **상세 로그**: [워크플로우 실행 결과 보기](${runUrl})

            > ⚠️ **문제를 해결한 후 다시 푸시하면 자동으로 재검사됩니다.**`;

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }
